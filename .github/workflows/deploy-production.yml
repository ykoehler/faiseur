# Deployment Workflow - Production (from main branch)
# Deploys to Firebase Hosting (production) when PR is merged to main

name: Deploy to Production

on:
  push:
    branches: [ main ]
    paths:
      - 'lib/**'
      - 'web/**'
      - 'pubspec.yaml'
      - '.github/workflows/**'

env:
  FLUTTER_VERSION: '3.35.5'

jobs:
  pre-deployment-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run all tests
        run: flutter test

      - name: Analyze code
        run: flutter analyze

      - name: Check version bump
        run: |
          # Verify version has been updated in pubspec.yaml
          VERSION=$(grep "^version:" pubspec.yaml | awk '{print $2}')
          echo "Deploying version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        id: version

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    timeout-minutes: 30
    environment:
      name: production
      url: https://faiseur.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run build_runner
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Create production Firebase options
        run: |
          mkdir -p lib
          echo '${{ secrets.FIREBASE_OPTIONS_PROD }}' > lib/firebase_options_prod.dart

      - name: Build web for production
        run: flutter build web --release --dart-define=FLAVOR=production

      - name: Deploy to Firebase Hosting (Production)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID_PROD }}

      - name: Create GitHub Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.1.0
          release_name: Release v0.1.0
          body: |
            ## ðŸŽ‰ Production Release
            
            Deployed to: https://faiseur.app
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false

      - name: Send Slack notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "Production Deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "ðŸš€ *Production Deployment* - ${{ job.status }}\n*Branch:* main\n*Commit:* ${{ github.sha }}\n*URL:* https://faiseur.app"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # iOS deployment - commented out until iOS secrets are configured
  # To enable: Uncomment this section and add the following secrets to GitHub:
  # - IOS_PROVISIONING_PROFILE: Base64-encoded provisioning profile
  # - IOS_CERTIFICATE_P12: Base64-encoded certificate
  # - IOS_CERTIFICATE_PASSWORD: Certificate password
  # - APP_STORE_CONNECT_API_KEY_ID: App Store Connect API key ID
  # - APP_STORE_CONNECT_API_ISSUER_ID: App Store Connect issuer ID
  # - APP_STORE_CONNECT_API_KEY: App Store Connect API key
  #
  # deploy-ios:
  #   name: Deploy iOS to TestFlight
  #   runs-on: macos-latest
  #   needs: pre-deployment-checks
  #   timeout-minutes: 60
  #   environment:
  #     name: production
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: 'stable'
  #         cache: true
  #
  #     - name: Get dependencies
  #       run: flutter pub get
  #
  #     - name: Create production Firebase options
  #       run: |
  #         mkdir -p lib
  #         echo '${{ secrets.FIREBASE_OPTIONS_PROD }}' > lib/firebase_options_prod.dart
  #
  #     - name: Setup provisioning profile
  #       env:
  #         PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
  #       run: |
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
  #
  #     - name: Import signing certificate
  #       env:
  #         CERTIFICATE_P12: ${{ secrets.IOS_CERTIFICATE_P12 }}
  #         CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
  #       run: |
  #         # Create keychain
  #         security create-keychain -p "" build.keychain
  #         security default-keychain -s build.keychain
  #         security unlock-keychain -p "" build.keychain
  #         
  #         # Import certificate
  #         echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
  #         security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
  #         security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
  #         
  #         rm certificate.p12
  #
  #     - name: Build iOS
  #       run: flutter build ipa --release --dart-define=FLAVOR=production
  #
  #     - name: Upload to TestFlight
  #       env:
  #         APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
  #         APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
  #         APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
  #       run: |
  #         xcrun altool --upload-app --type ios --file build/ios/ipa/*.ipa \
  #           --apiKey $APP_STORE_CONNECT_API_KEY_ID \
  #           --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID

  # Android deployment - commented out until Android secrets are configured
  # To enable: Uncomment this section and add the following secrets to GitHub:
  # - ANDROID_KEYSTORE: Base64-encoded Android keystore file
  # - ANDROID_KEYSTORE_PASSWORD: Keystore password
  # - ANDROID_KEY_ALIAS: Key alias in keystore
  # - ANDROID_KEY_PASSWORD: Key password
  # - PLAY_STORE_SERVICE_ACCOUNT_JSON: Base64-encoded Play Store service account JSON
  #
  # deploy-android:
  #   name: Deploy Android to Play Store
  #   runs-on: ubuntu-latest
  #   needs: pre-deployment-checks
  #   timeout-minutes: 60
  #   environment:
  #     name: production
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Java
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'zulu'
  #         java-version: '17'
  #
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: 'stable'
  #         cache: true
  #
  #     - name: Get dependencies
  #       run: flutter pub get
  #
  #     - name: Create production Firebase options
  #       run: |
  #         mkdir -p lib
  #         echo '${{ secrets.FIREBASE_OPTIONS_PROD }}' > lib/firebase_options_prod.dart
  #
  #     - name: Create keystore
  #       env:
  #         ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
  #       run: |
  #         echo "$ANDROID_KEYSTORE" | base64 --decode > android/app/upload-keystore.jks
  #
  #     - name: Create key.properties
  #       env:
  #         KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  #         KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
  #         KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
  #       run: |
  #         cat > android/key.properties << EOF
  #         storePassword=$KEYSTORE_PASSWORD
  #         keyPassword=$KEY_PASSWORD
  #         keyAlias=$KEY_ALIAS
  #         storeFile=upload-keystore.jks
  #         EOF
  #
  #     - name: Build Android App Bundle
  #       run: flutter build appbundle --release --dart-define=FLAVOR=production
  #
  #     - name: Upload to Play Store
  #       uses: r0adkll/upload-google-play@v1
  #       with:
  #         serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
  #         packageName: com.faiseur.faiseur
  #         releaseFiles: build/app/outputs/bundle/release/app-release.aab
  #         track: internal
  #         status: completed

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    # When iOS and Android are uncommented, update needs to: [deploy-production, deploy-ios, deploy-android]
    if: always()

    steps:
      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Web URL:** https://faiseur.app" >> $GITHUB_STEP_SUMMARY
          echo "**iOS:** Pending - secrets not yet configured (see deploy-production.yml)" >> $GITHUB_STEP_SUMMARY
          echo "**Android:** Pending - secrets not yet configured (see deploy-production.yml)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### To enable iOS and Android deployments:" >> $GITHUB_STEP_SUMMARY
          echo "1. Add required secrets to GitHub repository settings" >> $GITHUB_STEP_SUMMARY
          echo "2. See deploy-production.yml for required secret names and descriptions" >> $GITHUB_STEP_SUMMARY
          echo "3. Uncomment deploy-ios and deploy-android job sections" >> $GITHUB_STEP_SUMMARY
          echo "4. Update post-deployment needs array to include deploy-ios and deploy-android" >> $GITHUB_STEP_SUMMARY

      - name: Notify stakeholders
        run: |
          echo "Production deployment to web completed"
          # Add email/Slack notifications here
