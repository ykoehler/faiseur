# CI/CD Workflow - Pull Requests
# Runs on all pull requests to ensure code quality

name: Pull Request CI

on:
  pull_request:
    branches: [ develop, main ]
    paths:
      - 'lib/**'
      - 'test/**'
      - 'integration_test/**'
      - 'pubspec.yaml'
      - 'analysis_options.yaml'
      - '.github/workflows/**'

env:
  FLUTTER_VERSION: '3.35.5'

jobs:
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --set-exit-if-changed .

      - name: Analyze code
        run: flutter analyze

      - name: Check for outdated dependencies
        run: flutter pub outdated

  test:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: analyze

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run build_runner
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Run tests with coverage
        run: flutter test --coverage --reporter=expanded

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Check coverage threshold
        run: |
          if [ -f coverage/lcov.info ]; then
            # Install lcov if not available
            sudo apt-get update && sudo apt-get install -y lcov
            
            # Calculate coverage percentage
            COVERAGE=$(lcov --summary coverage/lcov.info | grep lines | awk '{print $2}' | sed 's/%//')
            echo "Coverage: $COVERAGE%"
            
            # Fail if coverage is below 75%
            if (( $(echo "$COVERAGE < 75" | bc -l) )); then
              echo "Error: Coverage $COVERAGE% is below 75% threshold"
              exit 1
            fi
          fi

  build-web:
    name: Build Web (Dev)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Create dev Firebase options
        run: |
          mkdir -p lib
          cat > lib/firebase_options_dev.dart << 'EOF'
          // Placeholder for CI - will be replaced with actual config
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;

          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                return web;
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                case TargetPlatform.iOS:
                  return ios;
                case TargetPlatform.macOS:
                  return macos;
                default:
                  throw UnsupportedError('DefaultFirebaseOptions are not supported for this platform.');
              }
            }

            static const FirebaseOptions web = FirebaseOptions(
              apiKey: 'fake-api-key',
              appId: 'fake-app-id',
              messagingSenderId: 'fake-sender-id',
              projectId: 'fake-project-id',
              authDomain: 'fake-project.firebaseapp.com',
              storageBucket: 'fake-project.appspot.com',
            );

            static const FirebaseOptions android = FirebaseOptions(
              apiKey: 'fake-api-key',
              appId: 'fake-app-id',
              messagingSenderId: 'fake-sender-id',
              projectId: 'fake-project-id',
              storageBucket: 'fake-project.appspot.com',
            );

            static const FirebaseOptions ios = FirebaseOptions(
              apiKey: 'fake-api-key',
              appId: 'fake-app-id',
              messagingSenderId: 'fake-sender-id',
              projectId: 'fake-project-id',
              storageBucket: 'fake-project.appspot.com',
              iosBundleId: 'com.faiseur.faiseur',
            );

            static const FirebaseOptions macos = FirebaseOptions(
              apiKey: 'fake-api-key',
              appId: 'fake-app-id',
              messagingSenderId: 'fake-sender-id',
              projectId: 'fake-project-id',
              storageBucket: 'fake-project.appspot.com',
              iosBundleId: 'com.faiseur.faiseur',
            );
          }
          EOF

      - name: Build web
        run: flutter build web --release --dart-define=FLAVOR=dev

      - name: Upload web build artifact
        uses: actions/upload-artifact@v3
        with:
          name: web-build-dev
          path: build/web/
          retention-days: 7

  build-macos:
    name: Build macOS (Dev)
    runs-on: macos-latest
    timeout-minutes: 30
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Create dev Firebase options (placeholder)
        run: |
          mkdir -p lib
          echo "// Placeholder - see build-web job for full content" > lib/firebase_options_dev.dart

      - name: Build macOS
        run: flutter build macos --release --dart-define=FLAVOR=dev

      - name: Upload macOS build artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-build-dev
          path: build/macos/Build/Products/Release/
          retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Setup Node.js for Firebase Emulators
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Get dependencies
        run: flutter pub get

      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only auth,firestore,storage &
          sleep 10

      - name: Run integration tests
        run: flutter test integration_test/

      - name: Stop Firebase Emulators
        if: always()
        run: |
          pkill -f firebase-emulators || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [analyze, test, build-web, build-macos]
    if: always()

    steps:
      - name: PR Summary Comment
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              analyze: '${{ needs.analyze.result }}',
              test: '${{ needs.test.result }}',
              build_web: '${{ needs.build-web.result }}',
              build_macos: '${{ needs.build-macos.result }}'
            };
            
            const emoji = {
              success: '✅',
              failure: '❌',
              cancelled: '⚠️',
              skipped: '⏭️'
            };
            
            let body = '## CI/CD Results\n\n';
            body += `- ${emoji[results.analyze] || '❓'} Code Analysis\n`;
            body += `- ${emoji[results.test] || '❓'} Unit & Widget Tests\n`;
            body += `- ${emoji[results.build_web] || '❓'} Web Build (Dev)\n`;
            body += `- ${emoji[results.build_macos] || '❓'} macOS Build (Dev)\n`;
            
            const allPassed = Object.values(results).every(r => r === 'success');
            
            if (allPassed) {
              body += '\n✨ All checks passed! Ready for review.';
            } else {
              body += '\n⚠️ Some checks failed. Please review the logs.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
