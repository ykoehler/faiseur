import 'package:firebase_core/firebase_core.dart';

// Import all environment configs
import 'firebase_options_dev.dart' as dev;
import 'firebase_options_prod.dart' as prod;
import 'firebase_options_staging.dart' as staging;

/// Firebase configuration manager that selects the appropriate Firebase options
/// based on the environment (dev, staging, production).
///
/// The environment is determined by the FLAVOR dart-define variable:
/// - `flutter run --dart-define=FLAVOR=dev` (default)
/// - `flutter run --dart-define=FLAVOR=staging`
/// - `flutter run --dart-define=FLAVOR=production`
class FirebaseConfig {
  /// The current flavor/environment.
  /// Defaults to 'dev' if not specified.
  static const String flavor = String.fromEnvironment(
    'FLAVOR',
    defaultValue: 'dev',
  );

  /// Returns the Firebase options for the current platform and environment.
  ///
  /// Note: The actual Firebase options files (firebase_options_dev.dart, etc.)
  /// will be generated by running `flutterfire configure` for each environment.
  /// Until then, this will throw an error.
  static FirebaseOptions get currentPlatform {
    switch (flavor) {
      case 'staging':
        return staging.DefaultFirebaseOptions.currentPlatform;
      case 'production':
        return prod.DefaultFirebaseOptions.currentPlatform;
      case 'dev':
      default:
        return dev.DefaultFirebaseOptions.currentPlatform;
    }
  }

  /// Whether the app is running in development mode.
  static bool get isDevelopment => flavor == 'dev';

  /// Whether the app is running in staging mode.
  static bool get isStaging => flavor == 'staging';

  /// Whether the app is running in production mode.
  static bool get isProduction => flavor == 'production';

  /// Returns a user-friendly name for the current environment.
  static String get environmentName {
    switch (flavor) {
      case 'staging':
        return 'Staging';
      case 'production':
        return 'Production';
      case 'dev':
      default:
        return 'Development';
    }
  }

  /// Whether to show debug information in the UI.
  static bool get showDebugInfo => !isProduction;

  /// Whether to use Firebase emulators.
  /// Only enabled in development mode by default.
  static bool get useEmulators => isDevelopment;

  /// Returns the appropriate API endpoint based on environment.
  static String get apiEndpoint {
    switch (flavor) {
      case 'production':
        return 'https://api.faiseur.app';
      case 'staging':
        return 'https://staging-api.faiseur.app';
      case 'dev':
      default:
        return 'http://localhost:5001';
    }
  }
}
