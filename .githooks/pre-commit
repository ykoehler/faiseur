#!/bin/bash
# Faiseur Pre-Commit Hook
# Runs verification checks before allowing commits
# 
# This script ensures code quality by running:
# 1. dart format check
# 2. flutter analyze (linting)
# 3. markdownlint (documentation)
# 4. flutter test (unit tests)
#
# Install: cp .githooks/pre-commit .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit
# Test: git commit --no-verify to skip hooks

set -e

echo "🔍 Running Faiseur pre-commit verification..."
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track if any checks failed
FAILED=0

# ============================================================================
# 1. CHECK FORMATTING
# ============================================================================
echo "📋 Checking code formatting..."
echo ""

# Create a temporary file to capture dart format output
TEMP_FORMAT=$(mktemp)
trap "rm -f $TEMP_FORMAT" EXIT

# Run dart format and capture output (this will reformat files if needed)
echo "  Analyzing code formatting..."
dart format --line-length 120 lib/ test/ integration_test/ > "$TEMP_FORMAT" 2>&1

# Check if any files were actually changed (not just analyzed)
# Pattern: "Formatted X files (Y changed)" - we only fail if Y > 0
if grep -E "Formatted.*\([1-9]" "$TEMP_FORMAT" > /dev/null; then
  echo ""
  echo -e "${YELLOW}⚠ Code formatting issues found${NC}"
  echo ""
  echo "📝 Summary:"
  echo "────────────────────────────────────────────────────────────────"
  grep "^Formatted\|^Changed" "$TEMP_FORMAT" | sed 's/^/  /'
  echo "────────────────────────────────────────────────────────────────"
  echo ""
  echo "🔧 To fix formatting, run:"
  echo ""
  echo "  ${YELLOW}dart format lib/ test/ integration_test/${NC}"
  echo ""
  echo "📌 Then stage all changes and retry:"
  echo ""
  echo "  ${YELLOW}git add -A${NC}"
  echo "  ${YELLOW}git commit${NC}"
  echo ""
  FAILED=1
else
  echo -e "${GREEN}✓${NC} Code formatting is correct"
fi

echo ""

# ============================================================================
# 2. RUN LINTING
# ============================================================================
echo ""
echo "🔎 Running linting analysis..."
echo ""

# Capture lint output
LINT_OUTPUT=$(flutter analyze --no-pub 2>&1)

if echo "$LINT_OUTPUT" | grep -q "No issues found"; then
  echo -e "${GREEN}✓${NC} No linting issues found"
else
  echo -e "${RED}✗${NC} Linting issues found:"
  echo ""
  echo "📋 Issues:"
  echo "────────────────────────────────────────────────────────────────"
  echo "$LINT_OUTPUT" | grep -E "^   (info|warning|error)" | head -30
  echo "────────────────────────────────────────────────────────────────"
  echo ""
  echo "💡 Tips:"
  echo "  • Run 'flutter analyze' to see all issues"
  echo "  • Most issues can be auto-fixed with 'dart fix --apply'"
  echo ""
  FAILED=1
fi

echo ""

# ============================================================================
# 3. CHECK MARKDOWN FILES
# ============================================================================
echo ""
echo "📖 Checking markdown files..."
echo ""

# Check if markdownlint is installed
if ! command -v markdownlint-cli2 &> /dev/null; then
  echo -e "${YELLOW}⚠ markdownlint-cli2 not found${NC}"
  echo "  To enable markdown linting, install it:"
  echo ""
  echo "  ${YELLOW}npm install -g markdownlint-cli2${NC}"
  echo ""
else
  # Run markdownlint on docs directory
  MARKDOWN_OUTPUT=$(markdownlint-cli2 docs/ 2>&1) || true
  
  # Check if there are actual errors (not just summary line)
  # Count lines that contain "error(s)" and extract the number
  ERROR_COUNT=$(echo "$MARKDOWN_OUTPUT" | grep -oP "Summary: \K[0-9]+" | head -1)
  
  if [ -z "$ERROR_COUNT" ] || [ "$ERROR_COUNT" -eq 0 ]; then
    echo -e "${GREEN}✓${NC} No markdown issues found"
  else
    echo -e "${RED}✗${NC} Markdown linting issues found:"
    echo ""
    echo "📋 Issues:"
    echo "────────────────────────────────────────────────────────────────"
    echo "$MARKDOWN_OUTPUT" | head -30
    echo "────────────────────────────────────────────────────────────────"
    echo ""
    echo "💡 Tips:"
    echo "  • See .markdownlint.yaml for linting rules"
    echo "  • Most issues can be auto-fixed with 'markdownlint-cli2 --fix docs/'"
    echo ""
    FAILED=1
  fi
fi

echo ""

# ============================================================================
# 4. RUN UNIT TESTS
# ============================================================================
echo ""
echo "🧪 Running unit tests..."
echo ""

# Run full test suite
if flutter test 2>&1 | tail -20 | grep -q "All tests passed"; then
  echo -e "${GREEN}✓${NC} All unit tests passed"
else
  echo -e "${YELLOW}⚠${NC} Some tests may have failed"
  echo ""
  flutter test 2>&1 | tail -15
  FAILED=1
fi

echo ""

# ============================================================================
# SUMMARY
# ============================================================================
echo ""
if [ $FAILED -eq 0 ]; then
  echo "═══════════════════════════════════════════════════════════════════"
  echo -e "${GREEN}✅ All pre-commit checks passed!${NC}"
  echo "═══════════════════════════════════════════════════════════════════"
  echo "🚀 Ready to commit"
  echo ""
  exit 0
else
  echo "═══════════════════════════════════════════════════════════════════"
  echo -e "${RED}❌ Pre-commit verification failed${NC}"
  echo "═══════════════════════════════════════════════════════════════════"
  echo ""
  echo "📝 What happened:"
  echo "  • Formatting: Check the files listed above"
  echo "  • Dart Linting: Review the issues and fix them"
  echo "  • Markdown: Review the linting issues"
  echo "  • Tests: Ensure all tests pass"
  echo ""
  echo "🛠️  Quick fixes:"
  echo "  1. ${YELLOW}dart format lib/ test/ integration_test/${NC} (fix formatting)"
  echo "  2. ${YELLOW}dart fix --apply${NC} (auto-fix some lint issues)"
  echo "  3. ${YELLOW}markdownlint-cli2 --fix docs/${NC} (fix markdown issues)"
  echo "  4. ${YELLOW}flutter test${NC} (run tests locally)"
  echo "  5. ${YELLOW}git add -A && git commit${NC} (retry)"
  echo ""
  echo "⚡ To bypass these checks (not recommended):"
  echo "  ${YELLOW}git commit --no-verify${NC}"
  echo ""
  exit 1
fi
